<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>Athif Wulandana</title>
		<description>My Blog</description>		
		<link>http://athifw.github.io/</link>
		<atom:link href="http://athifw.github.io//feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Internship Update and Senior Year</title>
				        
				
					<description>&lt;p&gt;My internship at Viget turned out to be an amazing and eye-opening experience for me. After learning how to code with Ruby on Rails while writing the Haxxor clone (more on that in my older posts), I worked with the other interns at Viget to work on a group project. Throughout the 10-week internship, we brainstormed different ideas to work on and then implemented these ideas. Our end result was &lt;a href=&quot;https://playpaparazzi.com/&quot;&gt;Paparazzi&lt;/a&gt;, a social game designed for a group of people to get to know each other. I learned a lot from developing Paparazzi - not only from coding the application itself, but also from collaborating with all of the other interns. Every week we would have 3 meetings to discuss progress and upcoming features, and I&#39;ve experienced how to develop in an agile environment.&lt;/p&gt;
</description>
				
				<pubDate>Sun, 13 Dec 2015 00:00:00 -0500</pubDate>
				<link>http://athifw.github.io//2015/12/13/internship-update/</link>
				<guid isPermaLink="true">http://athifw.github.io//2015/12/13/internship-update/</guid>
			</item>
		
			<item>
				<title>Finished with Hacker News!</title>
				        
				
					<description>&lt;p&gt;Sorry for the long update time, but I finally finished the Hacker News clone! You can even check it out live on &lt;a href=&quot;https://athif-haxxor.herokuapp.com/&quot;&gt;Heroku&lt;/a&gt;. After adding the comments model, I added the votes model which lets any logged in user vote on either an article or a comment. Because of the nature of this model, I used a polymorphic association between votes and &#39;voteable&#39;, which includes articles and comments. Implementing this model was actually easy, but I had to go back and re-write parts of the articles and comments model to improve efficiency. You can check out all the code on my &lt;a href=&quot;https://github.com/athifw/haxxor&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
				
				<pubDate>Mon, 20 Jul 2015 00:00:00 -0400</pubDate>
				<link>http://athifw.github.io//2015/07/20/haxxor-finished/</link>
				<guid isPermaLink="true">http://athifw.github.io//2015/07/20/haxxor-finished/</guid>
			</item>
		
			<item>
				<title>Almost Done With Hacker News!</title>
				        
				
					<description>&lt;p&gt;Since the last update, I&#39;ve updated most of the project and implemented many features. I added a comments model that could reply to both articles and other comments. I implemented this by first creating a polymorphic association making both articles and comments &quot;commentable&quot;. This association allowed me to easily get what a comment was commenting on. However, I implemented the polymorphic association after I implemented article commenting, so I had to replace a lot of the code I wrote to accept the association as opposed to just the article.&lt;/p&gt;
</description>
				
				<pubDate>Wed, 08 Jul 2015 00:00:00 -0400</pubDate>
				<link>http://athifw.github.io//2015/07/08/progress-update/</link>
				<guid isPermaLink="true">http://athifw.github.io//2015/07/08/progress-update/</guid>
			</item>
		
			<item>
				<title>Forgot Password Feature</title>
				        
				
					<description>&lt;p&gt;Today I implemented a feature that allows users to reset their password if they forget it. This required another column for my user table called a reset password token. This token is a randomly generated string that can be emailed to a user to reset the password. I also had to implement a mailer in order to actually send these emails.&lt;/p&gt;
</description>
				
				<pubDate>Tue, 30 Jun 2015 00:00:00 -0400</pubDate>
				<link>http://athifw.github.io//2015/06/30/forgot-password/</link>
				<guid isPermaLink="true">http://athifw.github.io//2015/06/30/forgot-password/</guid>
			</item>
		
			<item>
				<title>User Authentication for Articles</title>
				        
				
					<description>&lt;p&gt;When I first started the Haxxor application, I generated the article model first. This meant that any visitor could upload a link for an article. So after adding the user model, I had to tie the user logins with article creation. I did this with sessions, which create cookies in the browser. I also edited the articles controller to only create an article if a user was logged in. After doing this, I deleted the &#39;user&#39; field in the article form so that only the user&#39;s name would be attributed to the created article.&lt;/p&gt;
</description>
				
				<pubDate>Fri, 26 Jun 2015 00:00:00 -0400</pubDate>
				<link>http://athifw.github.io//2015/06/26/user-auth/</link>
				<guid isPermaLink="true">http://athifw.github.io//2015/06/26/user-auth/</guid>
			</item>
		
			<item>
				<title>Implemented Logins</title>
				        
				
					<description>&lt;p&gt;In order to implement logins for my application, I created a controller for sessions. I used the session variable to store information on a user that is logged in. I edited the controllers, mostly the application controller and sessiosn controller, to do this. For the rest of the week, I will implement more user logic - only logged in users can post articles.&lt;/p&gt;
</description>
				
				<pubDate>Thu, 25 Jun 2015 00:00:00 -0400</pubDate>
				<link>http://athifw.github.io//2015/06/25/user-logins/</link>
				<guid isPermaLink="true">http://athifw.github.io//2015/06/25/user-logins/</guid>
			</item>
		
			<item>
				<title>User Registration for Haxxor</title>
				        
				
					<description>&lt;p&gt;After updating the application with the features for articles, I&#39;m working on the users side of the application. So far, I&#39;ve created the ability to register for an account using ActiveRecord&#39;s &lt;a href=&quot;http://apidock.com/rails/ActiveModel/SecurePassword/ClassMethods/has_secure_password&quot;&gt;has_secure_password&lt;/a&gt; method. This required a lot of code in the users controller I generated, as well as a form to accept a username, email, password, and password confirmation. However, I still need to add rspec tests to ensure that any changes I make in the future will not change the working model.&lt;/p&gt;
</description>
				
				<pubDate>Wed, 24 Jun 2015 00:00:00 -0400</pubDate>
				<link>http://athifw.github.io//2015/06/24/user-registration/</link>
				<guid isPermaLink="true">http://athifw.github.io//2015/06/24/user-registration/</guid>
			</item>
		
			<item>
				<title>Back to Master Branch</title>
				        
				
					<description>&lt;p&gt;Just a short update here - today I just cleaned up some branches for the Hacker News clone and updated the master branch. I also added some tests to make sure the &#39;article&#39; model was working correctly. Then I implemented a feature that limits the number of articles viewable to the last 20 made. Instead of adding this feature in the view page, as I originally did, I edited the controller itself so that it doesn&#39;t need to load all of the articles everytime the page was loaded. This saves resources, especially when there are hundreds or even thousands or articles.&lt;/p&gt;
</description>
				
				<pubDate>Tue, 23 Jun 2015 00:00:00 -0400</pubDate>
				<link>http://athifw.github.io//2015/06/23/back-to-master/</link>
				<guid isPermaLink="true">http://athifw.github.io//2015/06/23/back-to-master/</guid>
			</item>
		
			<item>
				<title>Haxxor News is Live!</title>
				        
				
					<description>&lt;p&gt;After fixing problems brought in my pull request, I uploaded Haxxor News to Heroku! I ran into a few problems here - after receiving countless 502 HTTP request errors, I realized that I did not push the branch right. Also, I had issues with my Procfile. I had to install a web application server, so I ended up using the &#39;thin&#39; gem. After taking these steps, my application worked flawlessly on Heroku. You can check it out here: &lt;a href=&quot;https://athif-haxxor.herokuapp.com&quot;&gt;athif-haxxor.herokuapp.com&lt;/a&gt;. Currently, the only working part is the &lt;a href=&quot;https://athif-haxxor.herokuapp.com/articles&quot;&gt;articles model&lt;/a&gt;. For the rest of the week, I&#39;ll work on the the user model. This includes user registration and authentication.&lt;/p&gt;
</description>
				
				<pubDate>Mon, 22 Jun 2015 00:00:00 -0400</pubDate>
				<link>http://athifw.github.io//2015/06/22/haxxor-is-live/</link>
				<guid isPermaLink="true">http://athifw.github.io//2015/06/22/haxxor-is-live/</guid>
			</item>
		
			<item>
				<title>Starting Haxxor News</title>
				        
				
					<description>&lt;p&gt;Today I started my &#39;Haxxor&#39; site, which is going to be a Hacker News clone. So far, I&#39;ve managed to create a working Ruby application with an &#39;Article&#39; model. This model contains information on the author, title of the page, and url. I have also implemented test-driven development, which means that I usually write the tests for some portion of code and then write the actual code to pass the tests. As I said before, these tests are extremely useful, especially when changing code that does not seem to affect these tests. Running the tests can show whether these changes affect the end result.&lt;/p&gt;
</description>
				
				<pubDate>Fri, 19 Jun 2015 00:00:00 -0400</pubDate>
				<link>http://athifw.github.io//2015/06/19/haxxor/</link>
				<guid isPermaLink="true">http://athifw.github.io//2015/06/19/haxxor/</guid>
			</item>
		
	</channel>
</rss>
